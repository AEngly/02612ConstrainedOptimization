
function [x_star, mu_star, active_constraints] = primalActiveSetQP(G, g, A, b, x0)

    optimal = false;
    xk = x0;
    % Then we define the initial working set
    At = A';
    Wk = A'*x0 - b == 0;
    [n, m] = size(A);

    fprintf("Initial working set (Wk): \n");
    all_constraints = (1:m)';
    disp(all_constraints(Wk));  

    while ~optimal

        % Then we define the initial working set
        Ak = At(Wk,:);
        bk = b(Wk);  

        disp(Ak);
    
        % Then we use the null-space method (see slides EqualityConstrainedQP
        % from week 5).
    
        [Q,Rbar] = qr(Ak);
  
        m1 = size(Rbar,2);
        Q2 = Q(:,m1+1:n);
    
        % Then let Y = Q1 and Z = Q2
        Z = Q2;
    
        % Then A = [Y Z][R; 0] = YR = Q1 R
    
        gk = (G*xk + g);
        pz = (Z'*G*Z) \ -Z'*gk;
        p = Z*pz;
    
        % If step size is 0, then we need to find the multipliers
        if all(p == 0)
    
            muk = Ak \ gk;
    
            if all(muk > 0)
                x_star = xk;
                mu_star = zeros(m,1);
                mu_star(Wk,1) = muk;
                all_constraints = (1:m)';
                active_constraints = all_constraints(Wk);
                optimal = true;
            else
                % Then identify index of most negative multipliers
                remove_index = muk == min(muk);
                active_indices = find(Wk == 1);
                % Update working set
                Wk(active_indices(remove_index),:) = 0;
                % Keep the current solution
                xk = xk;
            end
        else
    
            % Compute the distance to the nearest inactive constraint in the search direction
            nominator = bk - Ak'*xk;
            denominator = Ak'*p;
            alphas = nominator ./ denominator;
            j = alphas == min(alphas);
            alpha = alphas(j);
    
            if alpha < 1
                xk = xk + alpha*p;
                Wk(j) = 1; 
            else
                xk = xk + p;
                Wk = Wk;
            end
            
        end 
    
        fprintf("Working set (Wk) in iteration: %0.0f\n", 1);
        all_constraints = (1:m)';
        disp(all_constraints(Wk));
    
        fprintf("Step (p) in iteration: %0.0f\n", 1);
        disp(p);
    
        fprintf("x (xk) in iteration: %0.0f\n", 1);
        disp(xk);

    end

end